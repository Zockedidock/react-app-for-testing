{"version":3,"sources":["Router/Home.js","Router/Login.js","Router/Register.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Home","className","src","logo","alt","id","href","Login","placeholder","type","required","autoFocus","textDecoration","Register","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uQAuBeA,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKC,GAAG,WACN,wBAAIJ,UAAU,8BAAd,YACA,uBAAGA,UAAU,wCAAwCK,KAAK,YAA1D,SAGA,uBAAGL,UAAU,wCAAwCK,KAAK,eAA1D,gBCaKC,MAvBf,WACE,OACE,yBAAKN,UAAU,SACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKC,GAAG,SACN,wBAAIJ,UAAU,8BAAd,SAEA,2BAAOO,YAAY,eAAeC,KAAK,QAAQJ,GAAG,aAAaJ,UAAU,oBAAoBS,UAAQ,EAACC,WAAS,IAE/G,2BAAOH,YAAY,WAAWC,KAAK,WAAWJ,GAAG,gBAAgBJ,UAAU,oBAAoBS,UAAQ,IAEvG,uBAAGT,UAAU,iBAAb,oBAA8C,uBAAGK,KAAK,cAAcM,eAAe,QAArC,aAE9C,4BAAQX,UAAU,wCAAwCQ,KAAK,UAA/D,aCSKI,MAvBf,WACE,OACE,yBAAKZ,UAAU,YACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yBAAKC,GAAG,SACN,wBAAIJ,UAAU,8BAAd,YAEA,2BAAOO,YAAY,eAAeC,KAAK,QAAQJ,GAAG,qBAAqBJ,UAAU,oBAAoBS,UAAQ,EAACC,WAAS,IAEvH,2BAAOH,YAAY,WAAWC,KAAK,WAAWJ,GAAG,wBAAwBJ,UAAU,oBAAoBS,UAAQ,IAE/G,uBAAGT,UAAU,iBAAb,wBAAkD,uBAAGK,KAAK,WAAWM,eAAe,QAAlC,UAElD,4BAAQX,UAAU,wCAAwCQ,KAAK,UAA/D,gB,OCKKK,MAhBf,WACE,OACE,yBAAKb,UAAU,UACb,kBAAC,IAAD,CAAOc,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IAGjC,kBAAC,IAAD,CAAOe,KAAK,UAAUE,UAAWV,IAGjC,kBAAC,IAAD,CAAOQ,KAAK,aAAaE,UAAWJ,MCJtBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRNC,IAASC,OAoBP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SDgGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.8f6fc854.chunk.js","sourcesContent":["import React from 'react';\nimport logo from '../logo.svg';\nimport '../css/App.css';\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div id=\"welcome\">\n          <h1 className=\"h3 mb-3 font-weight-normal\">Welcome!</h1>\n          <a className=\"btn btn-lg btn-primary btn-block mt-4\" href=\"/#/login\">\n            Login\n          </a>\n          <a className=\"btn btn-lg btn-primary btn-block mt-4\" href=\"/#/register\">\n            Register\n          </a>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport logo from '../logo.svg';\nimport '../css/App.css';\n\nfunction Login() {\n  return (\n    <div className=\"Login\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div id=\"login\">\n          <h1 className=\"h3 mb-3 font-weight-normal\">Login</h1>\n          \n          <input placeholder=\"Email adress\" type=\"email\" id=\"inputEmail\" className=\"form-control mb-2\" required autoFocus/>\n          \n          <input placeholder=\"Password\" type=\"password\" id=\"inputPassword\" className=\"form-control mb-2\" required/>\n\n          <p className=\"registerLogin\">Not Registered?  <a href=\"/#/register\" textDecoration=\"none\">Register</a></p>\n\n          <button className=\"btn btn-lg btn-primary btn-block mt-2\" type=\"submit\">\n            Login\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport logo from '../logo.svg';\nimport '../css/App.css';\n\nfunction Register() {\n  return (\n    <div className=\"Register\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div id=\"login\">\n          <h1 className=\"h3 mb-3 font-weight-normal\">Register</h1>\n          \n          <input placeholder=\"Email adress\" type=\"email\" id=\"inputEmailRegister\" className=\"form-control mb-2\" required autoFocus/>\n          \n          <input placeholder=\"Password\" type=\"password\" id=\"inputPasswordRegister\" className=\"form-control mb-2\" required/>\n\n          <p className=\"registerLogin\">Already registered?  <a href=\"/#/login\" textDecoration=\"none\">Login</a></p>\n\n          <button className=\"btn btn-lg btn-primary btn-block mt-2\" type=\"submit\">\n            Register\n          </button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default Register;","import React from 'react';\nimport './css/App.css';\nimport Home from './Router/Home'\nimport Login from './Router/Login'\nimport Register from './Router/Register'\nimport { Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"Router\">\n      <Route path=\"/\" exact component={Home}>\n\n      </Route>\n      <Route path=\"/login/\" component={Login}>\n\n      </Route>\n      <Route path=\"/register/\" component={Register}>\n\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n//import Home from './Router/Home'\n//import Login from './Router/Login';\n//import Register from './Router/Register';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  /*\n  <React.StrictMode>\n    <App />\n    <Login />\n  </React.StrictMode>,\n  \n  <Router>\n    <Route path=\"/\" component={App}>\n\n    </Route>\n    <Route path=\"/login\" exact component={Login}>\n\n    </Route>\n    <Route path=\"/register\" exact component={Register}>\n\n    </Route>\n\n  </Router>\n  */\n  <HashRouter>\n    <App />\n  </HashRouter>\n  ,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}